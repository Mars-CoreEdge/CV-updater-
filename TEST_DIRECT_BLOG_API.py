#!/usr/bin/env python3
"""
Test the direct blog API endpoint
"""

import requests
import json

BASE_URL = "http://localhost:8000"

def test_direct_blog_api():
    """Test the direct blog generation API"""
    
    print("🧪 Direct Blog API Test")
    print("=" * 60)
    
    # First, get all projects
    print("1. Getting all projects...")
    try:
        response = requests.get(f"{BASE_URL}/projects/", timeout=10)
        if response.status_code == 200:
            data = response.json()
            projects = data.get('projects', [])
            
            if projects:
                project = projects[0]  # Use first project
                project_title = project.get('title', 'Project')
                print(f"✅ Found project: {project_title}")
                
                # Test direct blog generation
                print(f"\n2. Generating blog for '{project_title}'...")
                blog_response = requests.post(f"{BASE_URL}/blog/generate", 
                                            json={"project_title": project_title}, 
                                            timeout=15)
                
                if blog_response.status_code == 200:
                    blog_data = blog_response.json()
                    if blog_data.get('success'):
                        blog_content = blog_data.get('blog_content', '')
                        project_title = blog_data.get('project_title', 'Project')
                        
                        print(f"✅ Blog generated successfully!")
                        print(f"   Project: {project_title}")
                        print(f"   Length: {len(blog_content)} characters")
                        
                        print(f"\n📝 BLOG CONTENT:")
                        print("=" * 60)
                        print(blog_content)
                        print("=" * 60)
                        
                        # Analysis
                        words = len(blog_content.split())
                        lines = len(blog_content.split('\n'))
                        has_emoji = any(char in blog_content for char in ['🚀', '💡', '🛠️', '⏱️', '🎯', '💬'])
                        has_hashtags = '#' in blog_content
                        
                        print(f"\n📊 Content Analysis:")
                        print(f"   Words: {words}")
                        print(f"   Lines: {lines}")
                        print(f"   Has emojis: {'✅' if has_emoji else '❌'}")
                        print(f"   Has hashtags: {'✅' if has_hashtags else '❌'}")
                        
                        return True
                    else:
                        print(f"❌ Blog generation failed: {blog_data.get('message')}")
                else:
                    print(f"❌ HTTP Error: {blog_response.status_code}")
            else:
                print("❌ No projects found")
        else:
            print(f"❌ Failed to get projects: {response.status_code}")
            
    except Exception as e:
        print(f"❌ Error: {e}")
    
    return False

def test_project_specific_blog():
    """Test blog generation for a specific project ID"""
    
    print("\n3. Testing project-specific blog by ID...")
    
    try:
        # Get projects with IDs
        response = requests.get(f"{BASE_URL}/projects/list", timeout=10)
        if response.status_code == 200:
            data = response.json()
            projects = data.get('projects', [])
            
            if projects:
                project = projects[0]  # Use first project
                project_id = project.get('id')
                project_title = project.get('title', 'Project')
                
                print(f"   Using project ID {project_id}: {project_title}")
                
                # Test blog generation by project ID
                blog_response = requests.post(f"{BASE_URL}/projects/{project_id}/blog", 
                                            timeout=15)
                
                if blog_response.status_code == 200:
                    blog_data = blog_response.json()
                    blog_content = blog_data.get('blog_content', '')
                    project_title = blog_data.get('project_title', 'Project')
                    
                    print(f"   ✅ Blog generated by ID!")
                    print(f"   📝 Length: {len(blog_content)} characters")
                    print(f"   📄 Preview: {blog_content[:150]}...")
                    
                    return True
                else:
                    print(f"   ❌ HTTP Error: {blog_response.status_code}")
            else:
                print("   ❌ No projects found")
        else:
            print(f"   ❌ Failed to get projects: {response.status_code}")
            
    except Exception as e:
        print(f"   ❌ Error: {e}")
    
    return False

if __name__ == "__main__":
    print("🚀 Direct Blog API Testing")
    print("=" * 60)
    
    # Test direct blog generation
    direct_test = test_direct_blog_api()
    
    # Test project-specific blog
    specific_test = test_project_specific_blog()
    
    print("\n" + "=" * 60)
    print("📊 TEST RESULTS SUMMARY")
    print("=" * 60)
    print(f"Direct Blog API: {'✅ PASS' if direct_test else '❌ FAIL'}")
    print(f"Project-Specific Blog: {'✅ PASS' if specific_test else '❌ FAIL'}")
    
    if direct_test or specific_test:
        print("\n🎉 Direct blog API is working!")
        print("\n💡 You can use these endpoints:")
        print("   • POST /blog/generate - Generate blog by project title")
        print("   • POST /projects/{id}/blog - Generate blog by project ID")
        print("   • Chat interface - Use natural language commands")
    else:
        print("\n⚠️ Direct blog API is not working properly.") 